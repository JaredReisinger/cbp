// +build ignore

package main

import (
	"fmt"
	"html/template"
	"log"
	"os"
	"os/exec"
	"strings"
	"time"
)

const infoFile = "build_info.go"

var buildTemplate = template.Must(template.New("build_info").Parse(
	`// Code generated by 'go generate' -- DO NOT EDIT.

package main

const (
	gitVersion = "{{ .GitVersion }}"
	buildDate  = "{{ .BuildDate }}"
)
`))

func main() {
	log.Print("generating build info...")

	info := &struct {
		GitVersion string
		BuildDate  string
	}{}

	log.Print("checking git...")
	cmd := exec.Command("git", "describe", "--tags", "--dirty")
	b, err := cmd.Output()
	if err != nil {
		log.Fatalf("error fetching git info: %+v", err)
	}

	gitOutput := strings.TrimSpace(fmt.Sprintf("%s", b))

	log.Printf("successfully retrieved git info: %q", gitOutput)

	info.GitVersion = gitOutput
	info.BuildDate = time.Now().Format(time.RFC3339)

	log.Printf("creating/truncating %q file...", infoFile)
	file, err := os.Create(infoFile)
	if err != nil {
		log.Fatalf("error creating %q: %+v", infoFile, err)
	}
	defer file.Close()

	// buf := &bytes.Buffer{}
	log.Printf("writing %q content...", infoFile)
	err = buildTemplate.Execute(file, info)
	if err != nil {
		log.Fatalf("error writing content to %q: %+v", infoFile, err)
	}

	log.Printf("successfully wrote %q", infoFile)
}
